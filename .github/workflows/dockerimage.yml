on:
  push:
    branches:
      - master

name: Deploy to Amazon EKS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      EKS_CLUSTER_NAME: aws-eks-us

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: payouttt-django-backend-us
        IMAGE_TAG: latest
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to EKS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::8} .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::8} 
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: Setup kubeconfig
      id: setup-kubeconfig
      run: |
        aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME 
    
    - name: deploy to K8
      uses: Consensys/kubernetes-action@master
      env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
          args: apply -f deployment.yaml

    - name: update image to sha value
      uses: Consensys/kubernetes-action@master
      env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
          args: set image deployment/payouttt payouttt=$ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::8}
